{"ast":null,"code":"var _jsxFileName = \"/home/marvin/Documents/Projects/React/hooks/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useForm } from \"./useForm\";\nimport { Hello } from \"./Hello\";\nimport { useFetch } from \"./useFetch\"; // the below function is called when we have a heavy computational task, and we want to only called the func only once\n// when component renders for the 1st time // It runs on the intial value\n// function expInState () {\n//   return 10\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [values, handleChange] = useForm({\n    email: '',\n    password: '',\n    firstname: ''\n  });\n  const [count, setCount] = useState(JSON.parse(localStorage.getItem('count')));\n  const {\n    data,\n    loading\n  } = useFetch(`http://numbersapi.com/${count}/trivia`);\n  useEffect(() => {\n    localStorage.setItem('count', JSON.stringify(count));\n  }, [count]); // every time this component re-renders it runs the useEffect function\n  // useEffect(() => {\n  //     const onMouseMove = e => {\n  //      console.log(e)\n  //      // console.log(e.screenX)\n  //      //    setPos(e.screenX)\n  //     }\n  //     window.addEventListener('mousemove', onMouseMove)\n  //     // clean up function\n  //     return () => {\n  //         window.removeEventListener('mousemove', onMouseMove)\n  //     }\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: !data ? 'loading....' : data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"count: \", count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(c => c + 1),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"firstname\",\n        value: values.firstname,\n        onChange: handleChange,\n        placeholder: \"First Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"email\",\n        value: values.email,\n        onChange: handleChange,\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        value: values.password,\n        onChange: handleChange,\n        placeholder: \"Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"swrwT/7EvSUlQr4TOsKUKgMBHtM=\", false, function () {\n  return [useForm, useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/marvin/Documents/Projects/React/hooks/src/App.js"],"names":["React","useEffect","useState","useForm","Hello","useFetch","App","values","handleChange","email","password","firstname","count","setCount","JSON","parse","localStorage","getItem","data","loading","setItem","stringify","c"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAAQC,QAAR,QAAuB,YAAvB,C,CAEA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,MAAD,EAASC,YAAT,IAAyBL,OAAO,CAAC;AAACM,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,EAAtB;AAA0BC,IAAAA,SAAS,EAAE;AAArC,GAAD,CAAtC;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACY,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAD,CAAlC;AACA,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBd,QAAQ,CAAE,yBAAwBO,KAAM,SAAhC,CAAhC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,SAAL,CAAeT,KAAf,CAA9B;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CANc,CAUd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACA;AAAA,2BACI;AAAA,8BACI;AAAA,kBAAM,CAACM,IAAD,GAAQ,aAAR,GAAwBA;AAA9B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,8BAAaN,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,MAAMC,QAAQ,CAACS,CAAC,IAAIA,CAAC,GAAG,CAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAMA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,WAAxB;AACO,QAAA,KAAK,EAAEf,MAAM,CAACI,SADrB;AAEO,QAAA,QAAQ,EAAEH,YAFjB;AAGO,QAAA,WAAW,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,cANA,eAWA;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,OAAxB;AACO,QAAA,KAAK,EAAED,MAAM,CAACE,KADrB;AAEO,QAAA,QAAQ,EAAED,YAFjB;AAGO,QAAA,WAAW,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,cAXA,eAgBA;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,IAAI,EAAC,UAA5B;AACO,QAAA,KAAK,EAAED,MAAM,CAACG,QADrB;AAEO,QAAA,QAAQ,EAAEF,YAFjB;AAGO,QAAA,WAAW,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,cAhBA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AA0BH,CAlDD;;GAAMF,G;UAC6BH,O,EAGPE,Q;;;KAJtBC,G;AAoDN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {useForm} from \"./useForm\";\nimport { Hello } from \"./Hello\"\nimport {useFetch} from \"./useFetch\";\n\n// the below function is called when we have a heavy computational task, and we want to only called the func only once\n// when component renders for the 1st time // It runs on the intial value\n// function expInState () {\n//   return 10\n// }\n\nconst App = () => {\n    const [values, handleChange] = useForm({email: '', password: '', firstname: ''});\n\n    const [count, setCount] = useState(JSON.parse(localStorage.getItem('count')))\n    const {data, loading} = useFetch(`http://numbersapi.com/${count}/trivia`)\n\n    useEffect(() => {\n        localStorage.setItem('count', JSON.stringify(count))\n    }, [count])\n\n    // every time this component re-renders it runs the useEffect function\n    // useEffect(() => {\n    //     const onMouseMove = e => {\n    //      console.log(e)\n    //      // console.log(e.screenX)\n    //      //    setPos(e.screenX)\n    //     }\n    //     window.addEventListener('mousemove', onMouseMove)\n    //     // clean up function\n    //     return () => {\n    //         window.removeEventListener('mousemove', onMouseMove)\n    //     }\n    // }, [])\n\n    return (\n    <div>\n        <>\n            <div>{!data ? 'loading....' : data}</div>\n            <div>count: {count}</div>\n            <button onClick={() => setCount(c => c + 1)}>Increment</button>\n            {/*<button onClick={() => setShowHello(!showHello)}>Toggle</button>*/}\n            {/*{ showHello && <Hello />}*/}\n        <input type=\"text\" name=\"firstname\"\n               value={values.firstname}\n               onChange={handleChange}\n               placeholder=\"First Name\"\n        />\n        <input type=\"text\" name=\"email\"\n               value={values.email}\n               onChange={handleChange}\n               placeholder=\"Email\"\n        />\n        <input type=\"password\" name=\"password\"\n               value={values.password}\n               onChange={handleChange}\n               placeholder=\"Password\"\n        />\n        </>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}