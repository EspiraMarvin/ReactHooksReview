{"ast":null,"code":"var _jsxFileName = \"/home/marvin/Documents/Projects/React/hooks/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useForm } from \"./useForm\";\nimport { Hello } from \"./Hello\";\nimport { useFetch } from \"./useFetch\"; // the below function is called when we have a heavy computational task, and we want to only called the func only once\n// when component renders for the 1st time // It runs on the intial value\n// function expInState () {\n//   return 10\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [values, handleChange] = useForm({\n    email: '',\n    password: '',\n    firstname: ''\n  });\n  const [count, setCount] = useState(() => JSON.parse(localStorage.getItem('count')));\n  const [showHello, setShowHello] = useState(true);\n  const inputRef = useRef();\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    console.log('form submittingg......', values);\n    console.log('form submittingg......');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: !data ? 'loading....' : data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"count: \", count]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(c => c + 1),\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowHello(!showHello),\n        children: \"Toggle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this), showHello && /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 28\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        ref: inputRef,\n        onSubmit: handleFormSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"firstname\",\n          value: values.firstname,\n          onChange: handleChange,\n          placeholder: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"email\",\n          value: values.email,\n          onChange: handleChange,\n          placeholder: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          value: values.password,\n          onChange: handleChange,\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            inputRef.current.focus();\n          },\n          children: \"Focus\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"jYMJjEcCKxHpO+YQx22603UZ5jE=\", false, function () {\n  return [useForm];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/marvin/Documents/Projects/React/hooks/src/App.js"],"names":["React","useEffect","useState","useRef","useForm","Hello","useFetch","App","values","handleChange","email","password","firstname","count","setCount","JSON","parse","localStorage","getItem","showHello","setShowHello","inputRef","handleFormSubmit","e","preventDefault","console","log","data","c","current","focus"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAAQC,QAAR,QAAuB,YAAvB,C,CAEA;AACA;AACA;AACA;AACA;;;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,MAAD,EAASC,YAAT,IAAyBL,OAAO,CAAC;AAACM,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,QAAQ,EAAE,EAAtB;AAA0BC,IAAAA,SAAS,EAAE;AAArC,GAAD,CAAtC;AAEA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,MAAMa,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAP,CAAlC;AACA,QAAO,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA3C;AACA,QAAMmB,QAAQ,GAAGlB,MAAM,EAAvB;;AAEA,QAAMmB,gBAAgB,GAAIC,CAAD,IAAO;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsClB,MAAtC;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH,GAJD;;AAOA,sBACA;AAAA,2BACI;AAAA,8BACI;AAAA,kBAAM,CAACC,IAAD,GAAQ,aAAR,GAAwBA;AAA9B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,8BAAad,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,MAAMC,QAAQ,CAACc,CAAC,IAAIA,CAAC,GAAG,CAAV,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,OAAO,EAAE,MAAMR,YAAY,CAAC,CAACD,SAAF,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,EAKMA,SAAS,iBAAI,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cALnB,eAMI;AAAM,QAAA,GAAG,EAAEE,QAAX;AAAqB,QAAA,QAAQ,EAAEC,gBAA/B;AAAA,gCAEJ;AACI,UAAA,IAAI,EAAC,MADT;AACgB,UAAA,IAAI,EAAC,WADrB;AAEI,UAAA,KAAK,EAAEd,MAAM,CAACI,SAFlB;AAGI,UAAA,QAAQ,EAAEH,YAHd;AAII,UAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,gBAFI,eAQJ;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,IAAI,EAAC,OAAxB;AACO,UAAA,KAAK,EAAED,MAAM,CAACE,KADrB;AAEO,UAAA,QAAQ,EAAED,YAFjB;AAGO,UAAA,WAAW,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,gBARI,eAaJ;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,IAAI,EAAC,UAA5B;AACO,UAAA,KAAK,EAAED,MAAM,CAACG,QADrB;AAEO,UAAA,QAAQ,EAAEF,YAFjB;AAGO,UAAA,WAAW,EAAC;AAHnB;AAAA;AAAA;AAAA;AAAA,gBAbI,eAkBJ;AAAQ,UAAA,OAAO,EAAE,MAAM;AACnBY,YAAAA,QAAQ,CAACQ,OAAT,CAAiBC,KAAjB;AACH,WAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBI;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAkCH,CAhDD;;GAAMvB,G;UAC6BH,O;;;KAD7BG,G;AAkDN,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {useForm} from \"./useForm\";\nimport { Hello } from \"./Hello\"\nimport {useFetch} from \"./useFetch\";\n\n// the below function is called when we have a heavy computational task, and we want to only called the func only once\n// when component renders for the 1st time // It runs on the intial value\n// function expInState () {\n//   return 10\n// }\n\nconst App = () => {\n    const [values, handleChange] = useForm({email: '', password: '', firstname: ''});\n\n    const [count, setCount] = useState(() => JSON.parse(localStorage.getItem('count')))\n    const  [showHello, setShowHello] = useState(true)\n    const inputRef = useRef()\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault()\n        console.log('form submittingg......', values)\n        console.log('form submittingg......')\n    }\n\n\n    return (\n    <div>\n        <>\n            <div>{!data ? 'loading....' : data}</div>\n            <div>count: {count}</div>\n            <button onClick={() => setCount(c => c + 1)}>Increment</button>\n            <button onClick={() => setShowHello(!showHello)}>Toggle</button>\n            { showHello && <Hello />}\n            <form ref={inputRef} onSubmit={handleFormSubmit}>\n\n        <input\n            type=\"text\" name=\"firstname\"\n            value={values.firstname}\n            onChange={handleChange}\n            placeholder=\"First Name\"\n        />\n        <input type=\"text\" name=\"email\"\n               value={values.email}\n               onChange={handleChange}\n               placeholder=\"Email\"\n        />\n        <input type=\"password\" name=\"password\"\n               value={values.password}\n               onChange={handleChange}\n               placeholder=\"Password\"\n        />\n        <button onClick={() => {\n            inputRef.current.focus()\n        }}\n        >Focus</button>\n            </form>\n        </>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}