{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nexport const useFetch = url => {\n  _s();\n\n  const isCurrent = useRef(true);\n  const [state, setState] = useState({\n    data: null,\n    loading: true\n  });\n  useEffect(() => {\n    // called when component is going to unmount\n    return () => {\n      isCurrent.current = false;\n    };\n  }, []);\n  useEffect(() => {\n    setState(state => ({\n      data: state.data,\n      loading: true\n    }));\n    fetch(url).then(x => x.text().then(y => {\n      // console.log(y)\n      setTimeout(() => {\n        if (isCurrent.current) setState({\n          data: y,\n          loading: false\n        });\n      }, 2000);\n    }));\n  }, [url, setState]);\n  return state;\n};\n\n_s(useFetch, \"t4nlnn5j8JBncI5cA0km0Zzz6tM=\");","map":{"version":3,"sources":["/home/marvin/Documents/Projects/React/hooks/src/useFetch.js"],"names":["useEffect","useState","useRef","useFetch","url","isCurrent","state","setState","data","loading","current","fetch","then","x","text","y","setTimeout"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,EAA6BC,MAA7B,QAA2C,OAA3C;AAEA,OAAO,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAC7B,QAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAACO,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,OAAO,EAAE;AAAtB,GAAD,CAAlC;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,WAAM,MAAM;AACRK,MAAAA,SAAS,CAACK,OAAV,GAAoB,KAApB;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAOAV,EAAAA,SAAS,CAAC,MAAM;AACfO,IAAAA,QAAQ,CAACD,KAAK,KAAK;AAAEE,MAAAA,IAAI,EAAEF,KAAK,CAACE,IAAd;AAAqBC,MAAAA,OAAO,EAAE;AAA9B,KAAL,CAAN,CAAR;AACAE,IAAAA,KAAK,CAACP,GAAD,CAAL,CAAWQ,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,GAASF,IAAT,CAAcG,CAAC,IAAI;AACpC;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb,YAAIX,SAAS,CAACK,OAAd,EACAH,QAAQ,CAAC;AAACC,UAAAA,IAAI,EAAEO,CAAP;AAAUN,UAAAA,OAAO,EAAE;AAAnB,SAAD,CAAR;AACH,OAHS,EAGP,IAHO,CAAV;AAIH,KANoB,CAArB;AAOA,GATQ,EASN,CAACL,GAAD,EAAMG,QAAN,CATM,CAAT;AAWA,SAAOD,KAAP;AACH,CAvBM;;GAAMH,Q","sourcesContent":["import {useEffect, useState, useRef} from  'react'\n\nexport const useFetch = (url) => {\n    const isCurrent = useRef(true)\n    const [state, setState] = useState({data: null, loading: true})\n\n    useEffect(() => {\n        // called when component is going to unmount\n        return() => {\n            isCurrent.current = false\n        }\n    }, [])\n\n    useEffect(() => {\n     setState(state => ({ data: state.data , loading: true}))\n     fetch(url).then(x => x.text().then(y => {\n         // console.log(y)\n         setTimeout(() => {\n             if (isCurrent.current)\n             setState({data: y, loading: false})\n         }, 2000)\n     }))\n    }, [url, setState])\n\n    return state\n}\n"]},"metadata":{},"sourceType":"module"}